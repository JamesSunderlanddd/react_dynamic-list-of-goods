{"version":3,"sources":["components/GoodsList/GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","map","good","style","color","name","id","getAll","fetch","then","response","json","get5First","a","sort","good1","good2","localeCompare","slice","getRedGoods","filter","App","state","listIsVisible","isLoading","errorMessage","hasError","loadingMessage","loadGoodsFromServer","getServerData","setState","this","type","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4RAMaA,EAA6B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC3C,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,oBAAkBC,MAAO,CAAEC,MAAM,GAAD,OAAKF,EAAKE,QAA1C,SACGF,EAAKG,MADCH,EAAKI,UCPf,SAASC,IACd,OAAOC,MAHI,yEAIRC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,sEACHN,IADG,cACjBP,EADiB,yBAGhBA,EACJc,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMV,KAAKY,cAAcD,EAAMX,SACtDa,MAAM,EAAG,IALW,2CAAH,qDAQTC,EAAW,uCAAG,4BAAAN,EAAA,sEACLN,IADK,cACnBP,EADmB,yBAGlBA,EAAMoB,QAAO,SAAAlB,GAAI,MAAmB,QAAfA,EAAKE,UAHR,2CAAH,qDCDlBiB,E,4MACJC,MAAQ,CACNtB,MAAO,GACPuB,eAAe,EACfC,WAAW,EACXC,aAAc,GACdC,UAAU,EACVC,eAAgB,uB,EAGlBC,oB,uCAAsB,WAAOC,GAAP,eAAAhB,EAAA,6DACpB,EAAKiB,SAAS,CAAE9B,MAAO,GAAIwB,WAAW,IADlB,kBAIEK,IAJF,OAIZ7B,EAJY,OAMlB,EAAK8B,SAAS,CAAE9B,MAAM,YAAKA,GAAQwB,WAAW,EAAOD,eAAe,IANlD,gDAQlB,EAAKO,SAAS,CAAEL,aAAc,yBAA0BD,WAAW,EAAOE,UAAU,IARlE,yD,kGAYtB,WAAU,IAAD,OACP,EAEIK,KAAKT,MADPtB,EADF,EACEA,MAAOuB,EADT,EACSA,cAAeC,EADxB,EACwBA,UAAWC,EADnC,EACmCA,aAAcC,EADjD,EACiDA,SAAUC,EAD3D,EAC2DA,eAG3D,OACE,qCACE,uDACA,wBAAQK,KAAK,SAASC,QAAS,kBAAM,EAAKL,oBAAoBrB,IAA9D,4BAGA,wBAAQyB,KAAK,SAASC,QAAS,kBAAM,EAAKL,oBAAoBhB,IAA9D,gCAGA,wBAAQoB,KAAK,SAASC,QAAS,kBAAM,EAAKL,oBAAoBT,IAA9D,4BAGA,wBACEO,IAAaF,EACXG,EACAJ,GAAiB,cAAC,EAAD,CAAWvB,MAAOA,KACtC0B,GAAaD,GAAgB,4BAAIA,W,GA3CxBS,IAAMC,WAiDTd,IC7Dfe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4efc93bc.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  goods: Good[],\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => {\n  return (\n    <ul>\n      {goods.map(good => (\n        <li key={good.id} style={{ color: `${good.color}` }}>\n          {good.name}\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => response.json());\n}\n\nexport const get5First = async () => {\n  const goods = await getAll();\n\n  return goods\n    .sort((good1, good2) => good1.name.localeCompare(good2.name))\n    .slice(0, 5);\n};\n\nexport const getRedGoods = async () => {\n  const goods = await getAll();\n\n  return goods.filter(good => good.color === 'red');\n};\n","import React from 'react';\nimport './App.scss';\nimport { GoodsList } from './components/GoodsList';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\ntype State = {\n  goods: Good[],\n  listIsVisible: boolean,\n  isLoading: boolean,\n  errorMessage: string,\n  hasError: boolean,\n  loadingMessage: string,\n};\n\nclass App extends React.Component<{}, State> {\n  state = {\n    goods: [],\n    listIsVisible: false,\n    isLoading: false,\n    errorMessage: '',\n    hasError: false,\n    loadingMessage: 'Loading in progress',\n  };\n\n  loadGoodsFromServer = async (getServerData: () => Promise<Good[]>) => {\n    this.setState({ goods: [], isLoading: true });\n\n    try {\n      const goods = await getServerData();\n\n      this.setState({ goods: [...goods], isLoading: false, listIsVisible: true });\n    } catch (error) {\n      this.setState({ errorMessage: 'No goods were found...', isLoading: false, hasError: true });\n    }\n  };\n\n  render() {\n    const {\n      goods, listIsVisible, isLoading, errorMessage, hasError, loadingMessage,\n    } = this.state;\n\n    return (\n      <>\n        <h1>Dynamic list of Goods</h1>\n        <button type=\"submit\" onClick={() => this.loadGoodsFromServer(getAll)}>\n          Load All goods\n        </button>\n        <button type=\"submit\" onClick={() => this.loadGoodsFromServer(get5First)}>\n          Load 5 first goods\n        </button>\n        <button type=\"submit\" onClick={() => this.loadGoodsFromServer(getRedGoods)}>\n          Load red goods\n        </button>\n        <br />\n        {!hasError && (isLoading\n          ? loadingMessage\n          : listIsVisible && <GoodsList goods={goods} />)}\n        {hasError && (errorMessage && <p>{errorMessage}</p>)}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}